From e18d6e064c177d977c011ce657ade49943d22803 Mon Sep 17 00:00:00 2001
From: Alexey Osipov <simba@lerlan.ru>
Date: Fri, 29 Apr 2011 20:37:48 +0700
Subject: [PATCH 3/6] Add function getifs() to get list of currently available network interfaces.

---
 getifaddr.c      |   77 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 getifaddr.h      |    9 ++++++
 miniupnpdtypes.h |    9 ++++++
 3 files changed, 95 insertions(+), 0 deletions(-)

diff --git a/getifaddr.c b/getifaddr.c
index fbfa103..983206e 100644
--- a/getifaddr.c
+++ b/getifaddr.c
@@ -14,6 +14,7 @@
 #include <net/if.h>
 #include <arpa/inet.h>
 #include <netinet/in.h>
+#include <stdlib.h>
 #if defined(sun)
 #include <sys/sockio.h>
 #endif
@@ -55,3 +56,79 @@ getifaddr(const char * ifname, char * buf, int len)
 	return 0;
 }
 
+struct iface_s *
+getifs()
+{
+	int s;
+	struct ifconf ifc;
+	int ifc_req_cnt = 0;
+	size_t ifc_req_size;
+	int ifs_cnt;
+	int i;
+	struct iface_s * ifs = NULL;
+
+	s = socket(PF_INET, SOCK_DGRAM, 0);
+	if (s < 0)
+	{
+		syslog(LOG_ERR, "socket(PF_INET, SOCK_DGRAM): %m");
+		return NULL;
+	}
+
+	ifc.ifc_req = NULL;
+
+	do
+	{
+		free(ifc.ifc_req);
+
+		ifc_req_cnt += 10;
+		ifc_req_size = sizeof(struct ifreq) * ifc_req_cnt;
+
+		ifc.ifc_req = (struct ifreq*)malloc(ifc_req_size);
+		if (ifc.ifc_req == NULL)
+		{
+			syslog(LOG_ERR, "malloc(sizeof(struct ifreq)*%d): %m", ifc_req_cnt);
+			close(s);
+			return NULL;
+		}
+
+		ifc.ifc_len = ifc_req_size;
+
+		if (ioctl(s, SIOCGIFCONF, &ifc) < 0)
+		{
+			syslog(LOG_ERR, "ioctl(s, SIOCGIFCONF, &ifc): %m");
+			close(s);
+			free(ifc.ifc_req);
+			return NULL;
+		}
+	} while(ifc.ifc_len >= ifc_req_size);
+
+	ifs_cnt = ifc.ifc_len / sizeof(struct ifreq);
+	ifs = (struct iface_s *) malloc(sizeof(struct iface_s) * (ifs_cnt+1));
+	if (ifs == NULL)
+	{
+		syslog(LOG_ERR, "malloc(sizeof(struct iface_s) * %d): %m", ifs_cnt);
+		return NULL;
+	}
+
+	ifs[ifs_cnt].name[0] = '\0';
+
+	for(i = 0; i < ifs_cnt; i++)
+	{
+		strncpy(ifs[i].name, ifc.ifc_req[i].ifr_name, IFNAMSIZ);
+		ifs[i].addr = ((struct sockaddr_in *)&ifc.ifc_req[i].ifr_addr)->sin_addr;
+		ifs[i].index = -1;
+
+		if(ioctl(s, SIOCGIFINDEX, &ifc.ifc_req[i]) < 0)
+		{
+			syslog(LOG_ERR, "%s: ioctl(s, SIOCGIFINDEX, ...): %m", ifs[i].name);
+			continue;
+		}
+
+		ifs[i].index = ifc.ifc_req[i].ifr_ifindex;
+	}
+
+	close(s);
+	free(ifc.ifc_req);
+
+	return ifs;
+}
diff --git a/getifaddr.h b/getifaddr.h
index c328094..cf26f12 100644
--- a/getifaddr.h
+++ b/getifaddr.h
@@ -8,6 +8,8 @@
 #ifndef __GETIFADDR_H__
 #define __GETIFADDR_H__
 
+#include "miniupnpdtypes.h"
+
 /* getifaddr()
  * take a network interface name and write the
  * ip v4 address as text in the buffer
@@ -15,5 +17,12 @@
 int
 getifaddr(const char * ifname, char * buf, int len);
 
+/* getifs()
+ * return empty-name-terminated array of available 
+ * network interfaces or NULL on failure
+ * caller is responsible to free memory */
+struct iface_s *
+getifs();
+
 #endif
 
diff --git a/miniupnpdtypes.h b/miniupnpdtypes.h
index cf7b2be..1d0ea74 100644
--- a/miniupnpdtypes.h
+++ b/miniupnpdtypes.h
@@ -9,6 +9,7 @@
 
 #include "config.h"
 #include <netinet/in.h>
+#include <net/if.h>
 #include <sys/queue.h>
 
 /* structure and list for storing lan addresses
@@ -24,4 +25,12 @@ struct lan_addr_s {
 };
 LIST_HEAD(lan_addr_list, lan_addr_s);
 
+/* structure for storing data related to
+ * network interfaces */
+struct iface_s {
+	char name[IFNAMSIZ];
+	int  index;
+	struct in_addr addr;
+};
+
 #endif
-- 
1.7.0.4

